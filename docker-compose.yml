# docker-compose.yml - 完整配置，支持本地和云端数据库
version: "3.8"

services:
  # 应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: notes-backend
    restart: unless-stopped
    ports:
      - "${HOST_PORT:-9191}:${CONTAINER_PORT:-9191}"
    environment:
      # 数据库模式配置
      - DB_MODE=${DB_MODE:-local}

      # 本地数据库配置
      - LOCAL_DB_HOST=${LOCAL_DB_HOST:-postgres}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT:-5432}
      - LOCAL_DB_USER=${LOCAL_DB_USER:-notes_user}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD:-notes_password_2024}
      - LOCAL_DB_NAME=${LOCAL_DB_NAME:-notes_db}

      # Vercel 数据库配置
      - VERCEL_POSTGRES_URL=${VERCEL_POSTGRES_URL}
      - VERCEL_POSTGRES_HOST=${VERCEL_POSTGRES_HOST}
      - VERCEL_POSTGRES_USER=${VERCEL_POSTGRES_USER}
      - VERCEL_POSTGRES_PASSWORD=${VERCEL_POSTGRES_PASSWORD}
      - VERCEL_POSTGRES_DATABASE=${VERCEL_POSTGRES_DATABASE}

      # 自定义数据库配置
      - CUSTOM_DB_URL=${CUSTOM_DB_URL}
      - CUSTOM_DB_HOST=${CUSTOM_DB_HOST}
      - CUSTOM_DB_PORT=${CUSTOM_DB_PORT}
      - CUSTOM_DB_USER=${CUSTOM_DB_USER}
      - CUSTOM_DB_PASSWORD=${CUSTOM_DB_PASSWORD}
      - CUSTOM_DB_NAME=${CUSTOM_DB_NAME}
      - CUSTOM_DB_SSLMODE=${CUSTOM_DB_SSLMODE:-disable}

      # 应用配置
      - JWT_SECRET=${JWT_SECRET}
      - SERVER_PORT=${CONTAINER_PORT:-9191}
      - GIN_MODE=${GIN_MODE:-release}
      - FRONTEND_BASE_URL=${FRONTEND_BASE_URL}

      # 文件配置
      - UPLOAD_PATH=/app/uploads
      - MAX_IMAGE_SIZE=${MAX_IMAGE_SIZE:-10485760}
      - MAX_DOCUMENT_SIZE=${MAX_DOCUMENT_SIZE:-52428800}
      - MAX_USER_STORAGE=${MAX_USER_STORAGE:-524288000}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./backup:/app/backup
    networks:
      - notes-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:${CONTAINER_PORT:-9191}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # 本地 PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: notes-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${LOCAL_DB_USER:-notes_user}
      - POSTGRES_PASSWORD=${LOCAL_DB_PASSWORD:-notes_password_2024}
      - POSTGRES_DB=${LOCAL_DB_NAME:-notes_db}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - notes-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${LOCAL_DB_USER:-notes_user} -d ${LOCAL_DB_NAME:-notes_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - local # 只有在 local profile 时才启动

  # Redis 缓存 (可选)
  redis:
    image: redis:7-alpine
    container_name: notes-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - notes-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    profiles:
      - local
      - cache

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: notes-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - notes-network
    profiles:
      - nginx
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  notes-network:
    driver: bridge
